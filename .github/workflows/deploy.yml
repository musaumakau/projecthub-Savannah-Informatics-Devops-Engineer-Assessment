
name: Build, Push and Deploy to EC2

on:
  push:
    branches:
      - main
    paths:
      - 'app/**'
  workflow_dispatch:

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ubuntu

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./app/backend
          file: ./app/backend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/projecthub-backend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/projecthub-backend:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/projecthub-backend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/projecthub-backend:buildcache,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./app
          file: ./app/docker/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/projecthub-frontend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/projecthub-frontend:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/projecthub-frontend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/projecthub-frontend:buildcache,mode=max

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Create deployment directory structure on EC2
        run: |
          ssh -i ~/.ssh/id_rsa ${{ env.EC2_USER }}@${{ secrets.EC2_HOST }} '
            mkdir -p /opt/app/monitoring/grafana/provisioning/datasources
          '

      - name: Copy docker-compose and monitoring configs to EC2
        run: |
          scp -i ~/.ssh/id_rsa \
            app/docker/docker-compose.yml \
            ${{ env.EC2_USER }}@${{ secrets.EC2_HOST }}:/opt/app/

          scp -i ~/.ssh/id_rsa \
            app/docker/monitoring/prometheus.yml \
            ${{ env.EC2_USER }}@${{ secrets.EC2_HOST }}:/opt/app/monitoring/

          scp -i ~/.ssh/id_rsa \
            app/docker/monitoring/grafana/provisioning/datasources/prometheus.yml \
            ${{ env.EC2_USER }}@${{ secrets.EC2_HOST }}:/opt/app/monitoring/grafana/provisioning/datasources/

      - name: Create .env file on EC2
        run: |
          ssh -i ~/.ssh/id_rsa ${{ env.EC2_USER }}@${{ secrets.EC2_HOST }} '
            cat > /opt/app/.env << ENVEOF
            DB_HOST=postgres
            DB_PORT=5432
            DB_NAME=projecthub
            DB_USER=projecthub_user
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            PORT=3000
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            ENVEOF
                        '

      - name: Deploy application
        run: |
          ssh -i ~/.ssh/id_rsa ${{ env.EC2_USER }}@${{ secrets.EC2_HOST }} '
            cd /opt/app
            
            # Login to Docker Hub
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            
            # Pull latest images
            docker compose pull backend frontend
            
            # Stop existing containers
            docker compose down
            
            # Start all services
            docker compose up -d
            
            # Wait for services
            echo "Waiting for services to start..."
            sleep 30
            
            # Show status
            docker compose ps
          '

      - name: Verify deployment
        run: |
          ssh -i ~/.ssh/id_rsa ${{ env.EC2_USER }}@${{ secrets.EC2_HOST }} '
            echo "=== Service Health Checks ==="
            
            curl -sf http://localhost:8080 > /dev/null && echo "✅ Frontend" || echo "❌ Frontend"
            curl -sf http://localhost:3000/health > /dev/null && echo "✅ Backend" || echo "❌ Backend"
            curl -sf http://localhost:9090/-/healthy > /dev/null && echo "✅ Prometheus" || echo "❌ Prometheus"
            curl -sf http://localhost:3001/api/health > /dev/null && echo "✅ Grafana" || echo "❌ Grafana"
            
            echo ""
            echo "=== Running Containers ==="
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          '

      - name: Deployment summary
        if: success()
        run: |
          echo "🎉 Deployment successful!"
          echo ""
          echo "🌐 Access URLs:"
          echo "  Frontend: http://${{ secrets.EC2_HOST }}:8080"
          echo "  Backend: http://${{ secrets.EC2_HOST }}:3000"
          echo "  Prometheus: http://${{ secrets.EC2_HOST }}:9090"
          echo "  Grafana: http://${{ secrets.EC2_HOST }}:3001 (admin/admin123)"

      - name: Cleanup
        if: always()
        run: rm -f ~/.ssh/id_rsa

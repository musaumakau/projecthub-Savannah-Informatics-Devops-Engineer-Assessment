name: Provision AWS Infrastructure

on:
  push:
    branches:
      - main
    paths:
      - 'infrastructure/**'
      - '!infrastructure/screenshots/**'
      - '!infrastructure/README.md'
  pull_request:
    branches:
      - main
    paths:
      - 'infrastructure/**'
      - '!infrastructure/screenshots/**'
      - '!infrastructure/README.md'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.12.2'
  AWS_REGION: 'eu-west-1'
  TF_WORKING_DIR: './infrastructure'

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-TerraformPlan

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: ${{ env.TF_WORKING_DIR }}
        continue-on-error: true

      - name: Create terraform.tfvars from Secrets
        run: |
          cat > terraform.tfvars << EOF
          ${{ secrets.TERRAFORM_TFVARS }}
          EOF
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -out=tfplan | tee plan-output.txt
          echo "exitcode=$?" >> $GITHUB_OUTPUT
        working-directory: ${{ env.TF_WORKING_DIR }}
        continue-on-error: true

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: ${{ env.TF_WORKING_DIR }}/tfplan
          retention-days: 5

      - name: Upload Plan Output
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-output
          path: ${{ env.TF_WORKING_DIR }}/plan-output.txt
          retention-days: 5

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const planOutput = fs.readFileSync('${{ env.TF_WORKING_DIR }}/plan-output.txt', 'utf8');
            const truncatedPlan = planOutput.length > 65000 ? planOutput.substring(0, 65000) + '\n... (truncated)' : planOutput;
            
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${truncatedPlan}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.TF_WORKING_DIR }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-TerraformApply

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Create terraform.tfvars from Secrets
        run: |
          cat > terraform.tfvars << EOF
          ${{ secrets.TERRAFORM_TFVARS }}
          EOF
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Apply
        id: apply
        run: |
          terraform apply -auto-approve tfplan | tee apply-output.txt
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Upload Apply Output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-apply-output
          path: ${{ env.TF_WORKING_DIR }}/apply-output.txt
          retention-days: 30

      - name: Terraform Output
        id: output
        run: terraform output -json
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Display Outputs
        run: |
          echo "### Terraform Outputs" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.output.outputs.stdout }}' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  verify-deployment:
    name: Verify EC2 Deployment
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Verify

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Get EC2 Instance Details
        id: ec2_details
        run: |
          INSTANCE_IP=$(terraform output -raw instance_public_ip 2>/dev/null || terraform output -raw elastic_ip 2>/dev/null || echo "")
          INSTANCE_ID=$(terraform output -raw instance_id 2>/dev/null || echo "")
          echo "instance_ip=${INSTANCE_IP}" >> $GITHUB_OUTPUT
          echo "instance_id=${INSTANCE_ID}" >> $GITHUB_OUTPUT
          echo "Instance IP: ${INSTANCE_IP}"
          echo "Instance ID: ${INSTANCE_ID}"
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/ec2_key
          chmod 600 ~/.ssh/ec2_key
          ssh-keyscan -H ${{ steps.ec2_details.outputs.instance_ip }} >> ~/.ssh/known_hosts 2>/dev/null || true

      - name: Wait for Instance to be Ready
        run: |
          echo "Waiting for instance to be fully ready..."
          sleep 30
          
          max_attempts=10
          attempt=0
          
          while [ $attempt -lt $max_attempts ]; do
            if ssh -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no -o ConnectTimeout=10 ubuntu@${{ steps.ec2_details.outputs.instance_ip }} "echo 'Instance is ready'" 2>/dev/null; then
              echo "Instance is ready!"
              exit 0
            fi
            attempt=$((attempt + 1))
            echo "Attempt $attempt/$max_attempts failed. Waiting 15 seconds..."
            sleep 15
          done
          
          echo "Instance did not become ready in time"
          exit 1

      - name: Verify SSH Connection
        id: ssh_verify
        run: |
          echo "### SSH Connection Verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          ssh -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no ubuntu@${{ steps.ec2_details.outputs.instance_ip }} << 'ENDSSH' | tee ssh-output.txt
            echo "✅ SSH connection successful!"
            echo ""
            echo "=== System Information ==="
            uname -a
            echo ""
            echo "=== Uptime ==="
            uptime
            echo ""
            echo "=== Disk Usage ==="
            df -h /
            echo ""
            echo "=== Memory Usage ==="
            free -h
            echo ""
            echo "=== Running Processes ==="
            ps aux | head -10
          ENDSSH
          
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat ssh-output.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Verify User Data Script Execution
        run: |
          echo "### User Data Script Verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          ssh -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no ubuntu@${{ steps.ec2_details.outputs.instance_ip }} << 'ENDSSH' | tee userdata-output.txt
            echo "=== Checking Cloud-Init Status ==="
            cloud-init status || echo "Cloud-init status unavailable"
            echo ""
            echo "=== User Data Logs (last 50 lines) ==="
            sudo tail -50 /var/log/cloud-init-output.log 2>/dev/null || echo "Log file not found"
            echo ""
            echo "=== Installed Packages Check ==="
            dpkg -l | grep -E 'docker|nginx|apache' || echo "Checking common packages..."
          ENDSSH
          
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat userdata-output.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Upload SSH Verification Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ssh-verification-logs
          path: |
            ssh-output.txt
            userdata-output.txt
          retention-days: 30

      - name: Cleanup SSH Key
        if: always()
        run: |
          rm -f ~/.ssh/ec2_key

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    permissions:
      id-token: write
      contents: read
    # environment:
    #   name: production-destroy
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-TerraformDestroy

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Create terraform.tfvars from Secrets
        run: |
          cat > terraform.tfvars << EOF
          ${{ secrets.TERRAFORM_TFVARS }}
          EOF
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Destroy
        id: destroy
        run: |
          terraform destroy -auto-approve | tee destroy-output.txt
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Upload Destroy Output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-destroy-output
          path: ${{ env.TF_WORKING_DIR }}/destroy-output.txt
          retention-days: 30